{"ast":null,"code":"import EmailProvider from \"next-auth/providers/email\";\nimport NextAuth from \"next-auth\";\nimport { MongoDBAdapter } from \"@next-auth/mongodb-adapter\";\nimport clientPromise from \"./lib/mongodb\";\nimport connectDB from \"./lib/connectDB\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport Users from '../../models/userModel';\nimport bcrypt from 'bcrypt';\nconnectDB();\nexport default NextAuth({\n  // Configure one or more authentication providers\n  providers: [CredentialsProvider({\n    name: \"Credentials\",\n    credentials: {\n      username: {\n        label: \"Username\",\n        type: \"text\",\n        placeholder: \"jsmith\"\n      },\n      password: {\n        label: \"Password\",\n        type: \"password\"\n      }\n    },\n\n    async authorize(credentials, req) {\n      console.log(\"credentials11111\", credentials);\n      const email = credentials.email;\n      const password = credentials.password;\n      const user = await Users.findOne({\n        email\n      });\n\n      if (!user) {\n        throw new Error(\"You have'nt registered yet\");\n      }\n\n      if (user) {\n        return signInUser({\n          password,\n          user\n        });\n      }\n    }\n\n  })],\n  pages: {\n    signIn: '/signin'\n  },\n  secret: 'secret',\n  database: process.env.MONGODB_URI\n});\n\nconst signInUser = async ({}) => {\n  if (!user.password) {\n    throw new Error(\"Please enter password\");\n  }\n\n  const isMatch = await bcrypt.compare(password, user.password);\n\n  if (!isMatch) {\n    throw new Error(\"Password is incorrect\");\n  }\n\n  return user;\n};","map":{"version":3,"sources":["/Users/bytedance/Desktop/06-onwards-to-a-bigger-project-starting-project/pages/api/auth/[...nextauth].js"],"names":["EmailProvider","NextAuth","MongoDBAdapter","clientPromise","connectDB","CredentialsProvider","Users","bcrypt","providers","name","credentials","username","label","type","placeholder","password","authorize","req","console","log","email","user","findOne","Error","signInUser","pages","signIn","secret","database","process","env","MONGODB_URI","isMatch","compare"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,2BAA1B;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,cAAT,QAA+B,4BAA/B;AACA,OAAOC,aAAP,MAA0B,eAA1B;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,mBAAP,MAAgC,iCAAhC;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEAH,SAAS;AAET,eAAeH,QAAQ,CAAC;AACpB;AACAO,EAAAA,SAAS,EAAE,CACPH,mBAAmB,CAAC;AAChBI,IAAAA,IAAI,EAAE,aADU;AAEhBC,IAAAA,WAAW,EAAE;AACTC,MAAAA,QAAQ,EAAE;AAAEC,QAAAA,KAAK,EAAE,UAAT;AAAqBC,QAAAA,IAAI,EAAE,MAA3B;AAAmCC,QAAAA,WAAW,EAAE;AAAhD,OADD;AAETC,MAAAA,QAAQ,EAAE;AAAEH,QAAAA,KAAK,EAAE,UAAT;AAAqBC,QAAAA,IAAI,EAAE;AAA3B;AAFD,KAFG;;AAMhB,UAAMG,SAAN,CAAgBN,WAAhB,EAA6BO,GAA7B,EAAkC;AAC9BC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCT,WAAhC;AACA,YAAMU,KAAK,GAAGV,WAAW,CAACU,KAA1B;AACA,YAAML,QAAQ,GAAGL,WAAW,CAACK,QAA7B;AACA,YAAMM,IAAI,GAAG,MAAMf,KAAK,CAACgB,OAAN,CAAc;AAAEF,QAAAA;AAAF,OAAd,CAAnB;;AACA,UAAI,CAACC,IAAL,EAAW;AACP,cAAM,IAAIE,KAAJ,CAAU,4BAAV,CAAN;AACH;;AAED,UAAIF,IAAJ,EAAU;AACN,eAAOG,UAAU,CAAC;AAAET,UAAAA,QAAF;AAAYM,UAAAA;AAAZ,SAAD,CAAjB;AACH;AACJ;;AAlBe,GAAD,CADZ,CAFS;AAwBpBI,EAAAA,KAAK,EAAE;AACHC,IAAAA,MAAM,EAAE;AADL,GAxBa;AA2BpBC,EAAAA,MAAM,EAAE,QA3BY;AA4BpBC,EAAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYC;AA5BF,CAAD,CAAvB;;AAgCA,MAAMP,UAAU,GAAG,OAAO,EAAP,KAAe;AAE9B,MAAI,CAACH,IAAI,CAACN,QAAV,EAAoB;AAChB,UAAM,IAAIQ,KAAJ,CAAU,uBAAV,CAAN;AACH;;AACD,QAAMS,OAAO,GAAG,MAAMzB,MAAM,CAAC0B,OAAP,CAAelB,QAAf,EAAyBM,IAAI,CAACN,QAA9B,CAAtB;;AACA,MAAI,CAACiB,OAAL,EAAc;AACV,UAAM,IAAIT,KAAJ,CAAU,uBAAV,CAAN;AACH;;AACD,SAAOF,IAAP;AACH,CAVD","sourcesContent":["import EmailProvider from \"next-auth/providers/email\";\nimport NextAuth from \"next-auth\"\nimport { MongoDBAdapter } from \"@next-auth/mongodb-adapter\";\nimport clientPromise from \"./lib/mongodb\";\nimport connectDB from \"./lib/connectDB\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport Users from '../../models/userModel';\nimport bcrypt from 'bcrypt';\n\nconnectDB();\n\nexport default NextAuth({\n    // Configure one or more authentication providers\n    providers: [\n        CredentialsProvider({\n            name: \"Credentials\",\n            credentials: {\n                username: { label: \"Username\", type: \"text\", placeholder: \"jsmith\" },\n                password: { label: \"Password\", type: \"password\" }\n            },\n            async authorize(credentials, req) {\n                console.log(\"credentials11111\", credentials);\n                const email = credentials.email;\n                const password = credentials.password;\n                const user = await Users.findOne({ email });\n                if (!user) {\n                    throw new Error(\"You have'nt registered yet\");\n                }\n\n                if (user) {\n                    return signInUser({ password, user });\n                }\n            }\n        })\n    ],\n    pages: {\n        signIn: '/signin',\n    },\n    secret: 'secret',\n    database: process.env.MONGODB_URI\n})\n\n\nconst signInUser = async ({ }) => {\n\n    if (!user.password) {\n        throw new Error(\"Please enter password\");\n    }\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) {\n        throw new Error(\"Password is incorrect\");\n    }\n    return user;\n}"]},"metadata":{},"sourceType":"module"}