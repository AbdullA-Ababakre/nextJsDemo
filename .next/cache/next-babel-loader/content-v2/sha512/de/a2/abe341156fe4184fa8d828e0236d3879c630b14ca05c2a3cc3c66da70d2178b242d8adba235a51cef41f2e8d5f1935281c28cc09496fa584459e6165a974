{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/bytedance/Desktop/06-onwards-to-a-bigger-project-starting-project/pages/signin.js\";\nimport { getCsrfToken, getProviders, signIn, getSession } from \"next-auth/react\";\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nexport default function SignIn({\n  csrfToken,\n  providers\n}) {\n  const router = useRouter();\n  const {\n    0: email,\n    1: setEmail\n  } = useState('');\n  const {\n    0: password,\n    1: setPassword\n  } = useState('');\n  const {\n    0: message,\n    1: setMessage\n  } = useState(null);\n\n  const signInUser = async e => {\n    e.preventDefault();\n    console.log(\"email,password\", email, password);\n    let options = {\n      redirect: false,\n      email,\n      password\n    };\n    const res = await signIn('credentials', options);\n    setMessage(null, res);\n\n    if (res !== null && res !== void 0 && res.error) {\n      setMessage(res.error);\n    }\n\n    return router.push('/');\n  };\n\n  const signUpUser = async e => {\n    e.preventDefault();\n    const res = await fetch('/api/register', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    let data = await res.json();\n\n    if (data.message) {\n      setMessage(data.message);\n    }\n\n    if (data.message == \"Registered successfully\") {\n      let options = {\n        redirect: false,\n        email,\n        password\n      };\n      const res = await signIn(\"credentials\", optionis);\n      return router.push(\"/\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      action: \"\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        name: \"csrfToken\",\n        type: \"hidden\",\n        defaultValue: csrfToken\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Email address\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          name: \"email\",\n          value: email,\n          onChange: e => setEmail(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Password\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          name: \"email\",\n          value: password,\n          onChange: e => setPassword(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'red'\n        },\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: e => signInUser(e),\n        children: \"Sign in with Credentials\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: e => signUpUser(e),\n        children: \"Sign Up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), Object.values(providers).map(provider => {\n      if (provider.name === 'Email' || provider.name === 'Credentials') {\n        return;\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => signIn(provider.id),\n          children: [\"Sign in with \", provider.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 29\n        }, this)\n      }, provider.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 25\n      }, this);\n    })]\n  }, void 0, true);\n}\nexport async function getServerSideProps(context) {\n  const {\n    req\n  } = context;\n  const session = await getSession({\n    req\n  });\n\n  if (session) {\n    // Signed in\n    return {\n      redirect: {\n        destination: \"/\"\n      }\n    };\n  }\n\n  const csrfToken = await getCsrfToken(context);\n  const providers = await getProviders();\n  return {\n    props: {\n      csrfToken,\n      providers\n    }\n  };\n}","map":{"version":3,"sources":["/Users/bytedance/Desktop/06-onwards-to-a-bigger-project-starting-project/pages/signin.js"],"names":["getCsrfToken","getProviders","signIn","getSession","useState","useEffect","useRouter","SignIn","csrfToken","providers","router","email","setEmail","password","setPassword","message","setMessage","signInUser","e","preventDefault","console","log","options","redirect","res","error","push","signUpUser","fetch","method","headers","body","JSON","stringify","data","json","optionis","target","value","color","Object","values","map","provider","name","id","getServerSideProps","context","req","session","destination","props"],"mappings":"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","sourcesContent":["import { getCsrfToken, getProviders, signIn, getSession } from \"next-auth/react\";\nimport { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\n\nexport default function SignIn({ csrfToken, providers }) {\n    const router = useRouter();\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [message, setMessage] = useState(null);\n\n    const signInUser = async (e) => {\n        e.preventDefault();\n        console.log(\"email,password\", email, password);\n        let options = { redirect: false, email, password }\n        const res = await signIn('credentials', options);\n        setMessage(null, res);\n        if (res?.error) {\n            setMessage(res.error);\n        }\n\n        return router.push('/');\n    }\n\n\n    const signUpUser = async (e) => {\n        e.preventDefault();\n        const res = await fetch('/api/register', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ email, password }),\n        })\n        let data = await res.json();\n\n        if (data.message) {\n            setMessage(data.message)\n        }\n        if (data.message == \"Registered successfully\") {\n            let options = { redirect: false, email, password }\n            const res = await signIn(\"credentials\", optionis)\n            return router.push(\"/\")\n        }\n    }\n\n    return (\n        <>\n            {/* <form method=\"post\" action=\"/api/auth/signin/email\">\n                <input name=\"csrfToken\" type=\"hidden\" defaultValue={csrfToken} />\n                <label>\n                    Email address\n                    <input type=\"email\" id=\"email\" name=\"email\" />\n                </label>\n                <button type=\"submit\">Sign in with Email</button>\n            </form> */}\n\n            <form action=\"\">\n                <input name=\"csrfToken\" type=\"hidden\" defaultValue={csrfToken} />\n                <label>\n                    Email address\n                    <input type=\"email\" id=\"email\" name=\"email\" value={email} onChange={e => setEmail(e.target.value)} />\n                </label>\n                <label>\n                    Password\n                    <input type=\"email\" id=\"email\" name=\"email\" value={password} onChange={e => setPassword(e.target.value)} />\n                </label>\n                <p style={{ color: 'red' }}>{message}</p>\n                <button onClick={(e) => signInUser(e)}>Sign in with Credentials</button>\n                <button onClick={(e) => signUpUser(e)}>Sign Up</button>\n            </form>\n\n\n\n            {\n                Object.values(providers).map((provider) => {\n                    if (provider.name === 'Email' || provider.name === 'Credentials') {\n                        return;\n                    }\n                    return (\n                        <div key={provider.name}>\n                            <button onClick={() => signIn(provider.id)}>\n                                Sign in with {provider.name}\n                            </button>\n                        </div>\n                    )\n                })\n            }\n        </>\n    )\n}\n\nexport async function getServerSideProps(context) {\n    const { req } = context;\n    const session = await getSession({ req })\n    if (session) {\n        // Signed in\n        return {\n            redirect: { destination: \"/\" }\n        }\n    }\n    const csrfToken = await getCsrfToken(context);\n    const providers = await getProviders();\n\n    return {\n        props: { csrfToken, providers }\n    }\n}"]},"metadata":{},"sourceType":"module"}