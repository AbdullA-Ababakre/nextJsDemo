{"ast":null,"code":"import Users from '../models/userModel';\nimport bcrypt from 'bcrypt';\nexport default async function handler(req, res) {\n  const body = req.body;\n  const userExist = await Users.findOne({\n    email: body.email\n  });\n\n  if (userExist) {\n    res.status(200).json({\n      message: 'Already registered'\n    });\n    return;\n  } // generate salt to hash password\n\n\n  const salt = await bcrypt.genSalt(10); // now we set user password to hashed password\n\n  const hashpass = await bcrypt.hash(body.password, salt);\n  const user = new Users({\n    email: body.email,\n    password: hashpass\n  });\n  user.password = await bcrypt.hash(user.password, salt);\n  await user.save();\n  res.status(200).json({\n    message: 'Registered successfully'\n  });\n}","map":{"version":3,"sources":["/Users/bytedance/Desktop/06-onwards-to-a-bigger-project-starting-project/pages/api/register.js"],"names":["Users","bcrypt","handler","req","res","body","userExist","findOne","email","status","json","message","salt","genSalt","hashpass","hash","password","user","save"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,qBAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,eAAe,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC5C,QAAMC,IAAI,GAAGF,GAAG,CAACE,IAAjB;AACA,QAAMC,SAAS,GAAG,MAAMN,KAAK,CAACO,OAAN,CAAc;AAAEC,IAAAA,KAAK,EAAEH,IAAI,CAACG;AAAd,GAAd,CAAxB;;AACA,MAAIF,SAAJ,EAAe;AACXF,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAArB;AACA;AACH,GAN2C,CAQ5C;;;AACA,QAAMC,IAAI,GAAG,MAAMX,MAAM,CAACY,OAAP,CAAe,EAAf,CAAnB,CAT4C,CAU5C;;AACA,QAAMC,QAAQ,GAAG,MAAMb,MAAM,CAACc,IAAP,CAAYV,IAAI,CAACW,QAAjB,EAA2BJ,IAA3B,CAAvB;AACA,QAAMK,IAAI,GAAG,IAAIjB,KAAJ,CAAU;AAAEQ,IAAAA,KAAK,EAAEH,IAAI,CAACG,KAAd;AAAqBQ,IAAAA,QAAQ,EAAEF;AAA/B,GAAV,CAAb;AACAG,EAAAA,IAAI,CAACD,QAAL,GAAgB,MAAMf,MAAM,CAACc,IAAP,CAAYE,IAAI,CAACD,QAAjB,EAA2BJ,IAA3B,CAAtB;AACA,QAAMK,IAAI,CAACC,IAAL,EAAN;AACAd,EAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAArB;AAEH","sourcesContent":["import Users from '../models/userModel';\nimport bcrypt from 'bcrypt';\n\nexport default async function handler(req, res) {\n    const body = req.body;\n    const userExist = await Users.findOne({ email: body.email });\n    if (userExist) {\n        res.status(200).json({ message: 'Already registered' })\n        return;\n    }\n\n    // generate salt to hash password\n    const salt = await bcrypt.genSalt(10);\n    // now we set user password to hashed password\n    const hashpass = await bcrypt.hash(body.password, salt);\n    const user = new Users({ email: body.email, password: hashpass });\n    user.password = await bcrypt.hash(user.password, salt);\n    await user.save();\n    res.status(200).json({ message: 'Registered successfully' });\n\n}"]},"metadata":{},"sourceType":"module"}