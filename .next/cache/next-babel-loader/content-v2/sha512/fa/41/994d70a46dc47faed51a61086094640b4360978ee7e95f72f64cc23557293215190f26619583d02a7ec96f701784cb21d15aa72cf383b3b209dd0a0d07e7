{"ast":null,"code":"import Users from '../models/userModel';\nimport bcrypt from 'bcrypt';\nexport default async function handler(req, res) {\n  const body = req.body;\n  const userExist = await Users.findOne({\n    email: body.emmail\n  });\n\n  if (userExist) {\n    res.status(200).json({\n      message: 'Already registered'\n    });\n    return;\n  }\n\n  const user = new Users(body); // generate salt to hash password\n\n  const salt = await bcrypt.genSalt(10); // now we set user password to hashed password\n\n  Juser.password = await bcrypt.hash(user.password, salt);\n  await user.save();\n  res.status(200).json({\n    message: 'Registered successfully'\n  });\n}","map":{"version":3,"sources":["/Users/bytedance/Desktop/06-onwards-to-a-bigger-project-starting-project/pages/api/register.js"],"names":["Users","bcrypt","handler","req","res","body","userExist","findOne","email","emmail","status","json","message","user","salt","genSalt","Juser","password","hash","save"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,qBAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,eAAe,eAAeC,OAAf,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AAC5C,QAAMC,IAAI,GAAGF,GAAG,CAACE,IAAjB;AACA,QAAMC,SAAS,GAAG,MAAMN,KAAK,CAACO,OAAN,CAAc;AAAEC,IAAAA,KAAK,EAAEH,IAAI,CAACI;AAAd,GAAd,CAAxB;;AACA,MAAIH,SAAJ,EAAe;AACXF,IAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAArB;AACA;AACH;;AACD,QAAMC,IAAI,GAAG,IAAIb,KAAJ,CAAUK,IAAV,CAAb,CAP4C,CAQ5C;;AACA,QAAMS,IAAI,GAAG,MAAMb,MAAM,CAACc,OAAP,CAAe,EAAf,CAAnB,CAT4C,CAU5C;;AACAC,EAAAA,KAAK,CAACC,QAAN,GAAiB,MAAMhB,MAAM,CAACiB,IAAP,CAAYL,IAAI,CAACI,QAAjB,EAA2BH,IAA3B,CAAvB;AACA,QAAMD,IAAI,CAACM,IAAL,EAAN;AACAf,EAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,IAAAA,OAAO,EAAE;AAAX,GAArB;AAEH","sourcesContent":["import Users from '../models/userModel';\nimport bcrypt from 'bcrypt';\n\nexport default async function handler(req, res) {\n    const body = req.body;\n    const userExist = await Users.findOne({ email: body.emmail });\n    if (userExist) {\n        res.status(200).json({ message: 'Already registered' })\n        return;\n    }\n    const user = new Users(body);\n    // generate salt to hash password\n    const salt = await bcrypt.genSalt(10);\n    // now we set user password to hashed password\n    Juser.password = await bcrypt.hash(user.password, salt);\n    await user.save();\n    res.status(200).json({ message: 'Registered successfully' });\n\n}"]},"metadata":{},"sourceType":"module"}